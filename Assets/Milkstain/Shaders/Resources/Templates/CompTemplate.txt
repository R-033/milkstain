Shader "Milkdrop/{0}"
{
    Properties
    {
        _MainTex ("sampler_main", 2D) = "white" {}
        _MainTexPrev ("prev sampler", 2D) = "white" {}
        blending ("blending", Float) = 0
        _MainTex2 ("sampler_fw_main", 2D) = "white" {}
        _MainTex3 ("sampler_fc_main", 2D) = "white" {}
        _MainTex4 ("sampler_pw_main", 2D) = "white" {}
        _MainTex5 ("sampler_pc_main", 2D) = "white" {}
        _MainTex6 ("sampler_blur1", 2D) = "white" {}
        _MainTex7 ("sampler_blur2", 2D) = "white" {}
        _MainTex8 ("sampler_blur3", 2D) = "white" {}
        _MainTex9 ("sampler_noise_lq", 2D) = "white" {}
        _MainTex10 ("sampler_noise_lq_lite", 2D) = "white" {}
        _MainTex11 ("sampler_noise_mq", 2D) = "white" {}
        _MainTex12 ("sampler_noise_hq", 2D) = "white" {}
        _MainTex13 ("sampler_pw_noise_lq", 2D) = "white" {}
        _MainTex14 ("sampler_noisevol_lq", 3D) = "white" {}
        _MainTex15 ("sampler_noisevol_hq", 3D) = "white" {}
        time ("time", Float) = 1
        gammaAdj ("gammaAdj", Float) = 1
        echo_zoom ("echo_zoom", Float) = 1
        echo_alpha ("echo_alpha", Float) = 1
        echo_orientation ("echo_orientation", Float) = 1
        invert ("invert", Float) = 1
        brighten ("brighten", Float) = 1
        _darken ("darken", Float) = 1
        solarize ("solarize", Float) = 1
        resolution ("resolution", Vector) = (1,1,1,1)
        aspect ("aspect", Vector) = (1,1,1,1)
        texsize ("texsize", Vector) = (1,1,1,1)
        texsize_noise_lq ("texsize_noise_lq", Vector) = (1,1,1,1)
        texsize_noise_mq ("texsize_noise_mq", Vector) = (1,1,1,1)
        texsize_noise_hq ("texsize_noise_hq", Vector) = (1,1,1,1)
        texsize_noise_lq_lite ("texsize_noise_lq_lite", Vector) = (1,1,1,1)
        texsize_noisevol_lq ("texsize_noisevol_lq", Vector) = (1,1,1,1)
        texsize_noisevol_hq ("texsize_noisevol_hq", Vector) = (1,1,1,1)
        bass ("bass", Float) = 1
        mid ("mid", Float) = 1
        treb ("treb", Float) = 1
        vol ("vol", Float) = 1
        bass_att ("bass_att", Float) = 1
        mid_att ("mid_att", Float) = 1
        treb_att ("treb_att", Float) = 1
        vol_att ("vol_att", Float) = 1
        frame ("frame", Float) = 1
        fps ("fps", Float) = 1
        _qa ("_qa", Vector) = (1,1,1,1)
        _qb ("_qb", Vector) = (1,1,1,1)
        _qc ("_qc", Vector) = (1,1,1,1)
        _qd ("_qd", Vector) = (1,1,1,1)
        _qe ("_qe", Vector) = (1,1,1,1)
        _qf ("_qf", Vector) = (1,1,1,1)
        _qg ("_qg", Vector) = (1,1,1,1)
        _qh ("_qh", Vector) = (1,1,1,1)
        slow_roam_cos ("slow_roam_cos", Vector) = (1,1,1,1)
        roam_cos ("roam_cos", Vector) = (1,1,1,1)
        slow_roam_sin ("slow_roam_sin", Vector) = (1,1,1,1)
        roam_sin ("roam_sin", Vector) = (1,1,1,1)
        blur1_min ("blur1_min", Float) = 1
        blur1_max ("blur1_max", Float) = 1
        blur2_min ("blur2_min", Float) = 1
        blur2_max ("blur2_max", Float) = 1
        blur3_min ("blur3_min", Float) = 1
        blur3_max ("blur3_max", Float) = 1
        rand_frame ("rand_frame", Vector) = (1,1,1,1)
        rand_preset ("rand_preset", Vector) = (1,1,1,1)
        fShader ("fShader", Float) = 1

        // properties
        {1}

    }
    SubShader
    {
        Cull Off

        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag

            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float4 color : COLOR;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float4 vertex : SV_POSITION;
                float2 uv : TEXCOORD0;
                float2 uv_orig : TEXCOORD1;
                float4 color : TEXCOORD2;
            };

            v2f vert (appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = v.vertex.xy * float2(0.5, 0.5) + float2(0.5, 0.5);
                o.uv.x = v.vertex.x * 0.5 + 0.5;
                o.uv.y = -v.vertex.y * 0.5 + 0.5;
                o.uv_orig = v.vertex.xy * float2(0.5, 0.5) + float2(0.5, 0.5);
                o.color = v.color;
                return o;
            }

            float lum__(float3 v)
            {
                return dot(v, float3(0.32,0.49,0.29));
            }

            sampler2D _MainTex; // sampler_main
            sampler2D _MainTexPrev;
            float4 _MainTex_HDR;
            float4 _MainTexPrev_HDR;
            float blending;
            sampler2D _MainTex2; // sampler_fw_main
            sampler2D _MainTex3; // sampler_fc_main
            sampler2D _MainTex4; // sampler_pw_main
            sampler2D _MainTex5; // sampler_pc_main
            sampler2D _MainTex6; // sampler_blur1
            float4 _MainTex6_HDR;
            sampler2D _MainTex7; // sampler_blur2
            float4 _MainTex7_HDR;
            sampler2D _MainTex8; // sampler_blur3
            float4 _MainTex8_HDR;
            sampler2D _MainTex9; // sampler_noise_lq
            sampler2D _MainTex10; // sampler_noise_lq_lite
            sampler2D _MainTex11; // sampler_noise_mq
            sampler2D _MainTex12; // sampler_noise_hq
            sampler2D _MainTex13; // sampler_pw_noise_lq
            sampler3D _MainTex14; // sampler_noisevol_lq
            sampler3D _MainTex15; // sampler_noisevol_hq
            float time;
            float gammaAdj;
            float echo_zoom;
            float echo_alpha;
            float echo_orientation;
            float invert;
            float brighten;
            float _darken;
            float solarize;
            float2 resolution;
            float4 aspect;
            float4 texsize;
            float4 texsize_noise_lq;
            float4 texsize_noise_mq;
            float4 texsize_noise_hq;
            float4 texsize_noise_lq_lite;
            float4 texsize_noisevol_lq;
            float4 texsize_noisevol_hq;
            float bass;
            float mid;
            float treb;
            float vol;
            float bass_att;
            float mid_att;
            float treb_att;
            float vol_att;
            float frame;
            float fps;
            float4 _qa;
            float4 _qb;
            float4 _qc;
            float4 _qd;
            float4 _qe;
            float4 _qf;
            float4 _qg;
            float4 _qh;

            #define q1 _qa.x
            #define q2 _qa.y
            #define q3 _qa.z
            #define q4 _qa.w
            #define q5 _qb.x
            #define q6 _qb.y
            #define q7 _qb.z
            #define q8 _qb.w
            #define q9 _qc.x
            #define q10 _qc.y
            #define q11 _qc.z
            #define q12 _qc.w
            #define q13 _qd.x
            #define q14 _qd.y
            #define q15 _qd.z
            #define q16 _qd.w
            #define q17 _qe.x
            #define q18 _qe.y
            #define q19 _qe.z
            #define q20 _qe.w
            #define q21 _qf.x
            #define q22 _qf.y
            #define q23 _qf.z
            #define q24 _qf.w
            #define q25 _qg.x
            #define q26 _qg.y
            #define q27 _qg.z
            #define q28 _qg.w
            #define q29 _qh.x
            #define q30 _qh.y
            #define q31 _qh.z
            #define q32 _qh.w

            float4 slow_roam_cos;
            float4 roam_cos;
            float4 slow_roam_sin;
            float4 roam_sin;
            float blur1_min;
            float blur1_max;
            float blur2_min;
            float blur2_max;
            float blur3_min;
            float blur3_max;
            float scale1;
            float scale2;
            float scale3;
            float bias1;
            float bias2;
            float bias3;
            float4 rand_frame;
            float4 rand_preset;
            float fShader;

            float4x3 rot_s1;
            float4x3 rot_s2;
            float4x3 rot_s3;
            float4x3 rot_s4;

            float4x3 rot_d1;
            float4x3 rot_d2;  
            float4x3 rot_d3;
            float4x3 rot_d4;

            float4x3 rot_f1;
            float4x3 rot_f2;
            float4x3 rot_f3;
            float4x3 rot_f4;

            float4x3 rot_vf1;
            float4x3 rot_vf2;
            float4x3 rot_vf3;
            float4x3 rot_vf4;

            float4x3 rot_uf1;
            float4x3 rot_uf2;
            float4x3 rot_uf3;
            float4x3 rot_uf4;

            float4x3 rot_rand1;
            float4x3 rot_rand2;
            float4x3 rot_rand3;
            float4x3 rot_rand4;

            float PI = 3.14159265359;
            float M_PI = 3.14159265359;
            float M_PI_2 = 3.14159265359 * 2.0;
            float M_INV_PI_2 = 0.159154943;

            float3 GetPixel(float2 uv) 
            {
                float4 __tex = tex2D(_MainTexPrev, uv);
                return DecodeHDR(__tex, _MainTexPrev_HDR);
            }

            float3 GetBlur1(float2 uv) 
            {
                float4 __tex = tex2D(_MainTex6, uv);
                return DecodeHDR(__tex, _MainTex6_HDR);
            }

            float3 GetBlur2(float2 uv) 
            {
                float4 __tex = tex2D(_MainTex7, uv);
                return DecodeHDR(__tex, _MainTex7_HDR);
            }

            float3 GetBlur3(float2 uv) 
            {
                float4 __tex = tex2D(_MainTex8, uv);
                return DecodeHDR(__tex, _MainTex8_HDR);
            }

            // header
            {2}

            float4 frag (v2f IN) : SV_Target
            {
                float3 ret = 0;

                float2 uv = IN.uv;
                float2 uv_orig = IN.uv_orig;

                float rad = length(uv - 0.5);
                float ang = atan2(uv.x - 0.5, uv.y - 0.5);

                float3 hue_shader = IN.color.xyz;

                // body
                {3}

                float4 __tex = tex2D(_MainTex, uv_orig);
                float3 __texHDR = DecodeHDR(__tex, _MainTex_HDR);

                return float4(lerp(__texHDR.xyz, ret, max(1.0 - blending, IN.color.w)), 1.0);
            }
            ENDCG
        }
    }
}
